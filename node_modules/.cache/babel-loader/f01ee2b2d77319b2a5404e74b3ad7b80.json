{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\shareyourdream\\\\shareyourdream\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nconst SIDE = 6;\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.cards = this.generateCards();\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n\n    return shuffle(result);\n  }\n\n  handleCardClick(card) {\n    console.log(card, 'clicked');\n  }\n\n  render() {\n    const won = new Date().getSeconds() % 2 === 0;\n    return React.createElement(\"div\", {\n      className: \"memory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(GuessCount, {\n      guesses: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), this.cards.map((card, index) => React.createElement(Card, {\n      card: card,\n      feedback: \"visible\",\n      key: index,\n      onClick: this.handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    })), won && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"GAGN\\xC9 !\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/wamp64/www/shareyourdream/shareyourdream/src/App.js"],"names":["React","Component","shuffle","Card","GuessCount","SIDE","SYMBOLS","App","cards","generateCards","result","size","candidates","length","card","pop","push","handleCardClick","console","log","render","won","Date","getSeconds","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,WAAP;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB,KAAKC,aAAL,EADkB;AAAA;;AAG1BA,EAAAA,aAAa,GAAG;AACd,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGN,IAAI,GAAGA,IAApB;AACA,UAAMO,UAAU,GAAGV,OAAO,CAACI,OAAD,CAA1B;;AACA,WAAOI,MAAM,CAACG,MAAP,GAAgBF,IAAvB,EAA6B;AAC3B,YAAMG,IAAI,GAAGF,UAAU,CAACG,GAAX,EAAb;AACAL,MAAAA,MAAM,CAACM,IAAP,CAAYF,IAAZ,EAAkBA,IAAlB;AACD;;AACD,WAAOZ,OAAO,CAACQ,MAAD,CAAd;AACD;;AAEDO,EAAAA,eAAe,CAACH,IAAD,EAAO;AACpBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkB,SAAlB;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,UAAX,KAA0B,CAA1B,KAAgC,CAA5C;AACA,WACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKf,KAAL,CAAWgB,GAAX,CAAe,CAACV,IAAD,EAAOW,KAAP,KAClB,oBAAC,IAAD;AACE,MAAA,IAAI,EAAEX,IADR;AAEE,MAAA,QAAQ,EAAC,SAFX;AAGE,MAAA,GAAG,EAAEW,KAHP;AAIE,MAAA,OAAO,EAAE,KAAKR,eAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG,CAFH,EAUGI,GAAG,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVV,CADF;AAcD;;AAlCyB;;AAqC5B,eAAed,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\n\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\n\nclass App extends Component {\n  cards = this.generateCards()\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  handleCardClick(card) {\n    console.log(card, 'clicked')\n  }\n\n  render() {\n    const won = new Date().getSeconds() % 2 === 0\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={0} />\n        {this.cards.map((card, index) => (\n      <Card\n        card={card}\n        feedback=\"visible\"\n        key={index}\n        onClick={this.handleCardClick}\n      />\n    ))}\n        {won && <p>GAGNÉ !</p>}\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}