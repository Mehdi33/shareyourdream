{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\shareyourdream\\\\shareyourdream\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport HallOfFame, { FAKE_HOF } from './HallOfFame';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nconst SIDE = 6;\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      matchedCardIndices: []\n    };\n\n    this.handleCardClick = index => {\n      const currentPair = this.state.currentPair;\n\n      if (currentPair.length === 2) {\n        return;\n      }\n\n      if (currentPair.length === 0) {\n        this.setState({\n          currentPair: [index]\n        });\n        return;\n      }\n\n      this.handleNewPairClosedBy(index);\n    };\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n\n    return shuffle(result);\n  } // Arrow fx for binding\n\n\n  handleNewPairClosedBy(index) {\n    const _this$state = this.state,\n          cards = _this$state.cards,\n          currentPair = _this$state.currentPair,\n          guesses = _this$state.guesses,\n          matchedCardIndices = _this$state.matchedCardIndices;\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n    this.setState({\n      currentPair: newPair,\n      guesses: newGuesses\n    });\n\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n\n    setTimeout(() => this.setState({\n      currentPair: []\n    }), VISUAL_PAUSE_MSECS);\n  }\n\n  getFeedbackForCard(index) {\n    const _this$state2 = this.state,\n          currentPair = _this$state2.currentPair,\n          matchedCardIndices = _this$state2.matchedCardIndices;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          cards = _this$state3.cards,\n          guesses = _this$state3.guesses,\n          matchedCardIndices = _this$state3.matchedCardIndices;\n    const won = matchedCardIndices.length === cards.length;\n    return React.createElement(\"div\", {\n      className: \"memory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), cards.map((card, index) => React.createElement(Card, {\n      card: card,\n      feedback: this.getFeedbackForCard(index),\n      index: index,\n      key: index,\n      onClick: this.handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), won && React.createElement(HallOfFame, {\n      entries: FAKE_HOF,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/wamp64/www/shareyourdream/shareyourdream/src/App.js"],"names":["React","Component","HallOfFame","FAKE_HOF","shuffle","Card","GuessCount","SIDE","SYMBOLS","App","state","cards","generateCards","currentPair","guesses","matchedCardIndices","handleCardClick","index","length","setState","handleNewPairClosedBy","result","size","candidates","card","pop","push","newPair","newGuesses","matched","setTimeout","VISUAL_PAUSE_MSECS","getFeedbackForCard","indexMatched","includes","render","won","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport HallOfFame, { FAKE_HOF } from './HallOfFame'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\n\n\n\nconst SIDE = 6\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø'\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    matchedCardIndices: [],\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  // Arrow fx for binding\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n\n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  render() {\n    const { cards, guesses, matchedCardIndices } = this.state\n    const won = matchedCardIndices.length === cards.length\n    return (\n      <div className=\"memory\">\n      <GuessCount guesses={guesses} />\n      {cards.map((card, index) => (\n        <Card\n        card={card}\n        feedback={this.getFeedbackForCard(index)}\n        index={index}\n        key={index}\n        onClick={this.handleCardClick}\n        />\n      ))}\n      {won && <HallOfFame entries={FAKE_HOF} />}\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}